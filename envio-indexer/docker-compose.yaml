services:
  envio-postgres:
    container_name: envio-postgres
    image: postgres:15.3
    restart: always
    ports:
      - "${PG_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testing}
      POSTGRES_USER: postgres
      POSTGRES_DB: envio-dev
    networks:
      - my-proxy-net
  pg-admin:
    container_name: envio-pg-admin
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "${PGADMIN_PUBLIC_PORT:-6543}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-dev@float.capital}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-testing}
    networks:
      - my-proxy-net
    volumes:
      - ./.config/pgadmin/servers.json:/pgadmin4/servers.json
  ganache:
    image: trufflesuite/ganache:latest
    ports:
      - "8545:8545"
    command:
      --mnemonic "test test test test test test test test test test test test"
      --db /ganache-data --chain.chainId 1337 --chain.networkId 1337 --time 2023-02-02T08:24:37+00:00
      --gasLimit 10000000
    container_name: ganache
    volumes:
      - ganache-data:/ganache-data
  graphql-engine:
    container_name: graphql-engine
    image: hasura/graphql-engine:v2.23.0
    ports:
      - "${HASURA_EXTERNAL_PORT:-8080}:8080"
    depends_on:
      - "envio-postgres"
    restart: always
    environment:
      # TODO: refine migrations. For now we will run migrations externally.
      # See details of this image here: https://hasura.io/docs/latest/graphql/core/migrations/advanced/auto-apply-migrations.html
      # HASURA_GRAPHQL_MIGRATIONS_DIR: /hasura-migrations
      # HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-testing}@envio-postgres:5432/envio-dev
      HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GRAPHQL_ENABLE_CONSOLE:-true} # can make this default to false once we are further in our development.
      HASURA_GRAPHQL_ENABLED_LOG_TYPES:
        startup, http-log, webhook-log, websocket-log,
        query-log
      HASURA_GRAPHQL_NO_OF_RETRIES: 10
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-testing}
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: true
      PORT: 8080
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
    healthcheck:
      # CMD from a GH issue thread, no curl or wget installed with image
      # but hasura comes with a /healthz public endpoint for checking server health
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 5s
      timeout: 2s
      retries: 50
      start_period: 5s
    networks:
      - my-proxy-net
volumes:
  db_data:
  ganache-data:
networks:
  my-proxy-net:
    name: local_test_network
